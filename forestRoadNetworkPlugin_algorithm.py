# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ForestRoads
                                 A QGIS plugin
 Create a network of forest roads based on zones to access, roads to connect
 them to, and a cost matrix.
 The code of the plugin is based on the "LeastCostPath" plugin available on
 https://github.com/Gooong/LeastCostPath. We thank their team for the template.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 10-07-2019
        copyright            : (C) 2019 by Clement Hardy
        email                : clem.hardy@outlook.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script describes the algorithm used to make the forest road network.
"""

__author__ = 'clem.hardy@outlook.fr'
__date__ = 'Currently in work'
__copyright__ = '(C) 2019 by Clement Hardy'

# We load every function necessary from the QIS packages.
from PyQt5.QtCore import QCoreApplication, QVariant
from PyQt5.QtGui import QIcon
from qgis.core import (
    QgsFeature,
    QgsGeometry,
    QgsPoint,
    QgsField,
    QgsFields,
    QgsWkbTypes,
    QgsProcessing,
    QgsFeatureSink,
    QgsProcessingException,
    QgsProcessingAlgorithm,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterRasterLayer,
    QgsProcessingParameterBand,
    QgsProcessingParameterBoolean
)
# We import the algorithm used for processing a road.
from .dijkstra_algorithm import dijkstra
# We import mathematical functions needed for the algorithm.
from math import floor, sqrt

# The algorithm class heritates from the algorithm class of QGIS.
# There, it can register different parameter during initialization
# that can be put into variables using "
class ForestRoadNetworkAlgorithm(QgsProcessingAlgorithm):
    """
    Class that described the algorithm, that will be launched
    via the provider, itself launched via initialization of
    the plugin.

    The algorithm takes 4 entries :

    - A cost raster
    - The raster band to use for the cost
    - The layer with the polygons of zones to access
    - The layer with the roads (lines) that they can be connected to
    by the generated roads
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT_COST_RASTER = 'INPUT_COST_RASTER'
    INPUT_RASTER_BAND = 'INPUT_RASTER_BAND'
    INPUT_POLYGONS_TO_ACCESS = 'INPUT_POLYGONS_TO_ACCESS'
    INPUT_ROADS_TO_CONNECT_TO = 'INPUT_ROADS_TO_CONNECT_TO'
    # BOOLEAN_OUTPUT_LINEAR_REFERENCE = 'BOOLEAN_OUTPUT_LINEAR_REFERENCE'
    SKIDDING_DISTANCE = 'SKIDDING_DISTANCE'
    METHOD_OF_GENERATION = 'METHOD_OF_GENERATION'
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties. Theses will be asked to the user.
        """
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT_COST_RASTER,
                self.tr('Cost raster layer'),
            )
        )

        self.addParameter(
            QgsProcessingParameterBand(
                self.INPUT_RASTER_BAND,
                self.tr('Cost raster band'),
                0,
                self.INPUT_COST_RASTER,
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_POLYGONS_TO_ACCESS,
                self.tr('Polygons to access via the generated roads'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_ROADS_TO_CONNECT_TO,
                self.tr('Roads to connect the polygons to access to'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.SKIDDING_DISTANCE,
                self.tr('Skidding distance'),
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.METHOD_OF_GENERATION,
                self.tr('Method of generation of the road network'),
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output for the forest road network')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        cost_raster = self.parameterAsRasterLayer(
            parameters,
            self.INPUT_COST_RASTER,
            context
        )

        cost_raster_band = self.parameterAsInt(
            parameters,
            self.INPUT_RASTER_BAND,
            context
        )

        polygons_to_connect = self.parameterAsVectorLayer(
            parameters,
            self.INPUT_POLYGONS_TO_ACCESS,
            context
        )

        current_roads = self.parameterAsVectorLayer(
            parameters,
            self.INPUT_ROADS_TO_CONNECT_TO,
            context
        )

        skidding_distance = self.parameterAsInt(
            parameters,
            self.SKIDDING_DISTANCE,
            context
        )

        method_of_generation = self.parameterAsString(
            parameters,
            self.METHOD_OF_GENERATION,
            context
        )

        # If source was not found, throw an exception to indicate that the algorithm
        # encountered a fatal error. The exception text can be any string, but in this
        # case we use the pre-built invalidSourceError method to return a standard
        # helper text for when a source cannot be evaluated
        if cost_raster is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.INPUT_COST_RASTER))
        if cost_raster_band is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.INPUT_RASTER_BAND))
        if polygons_to_connect is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.INPUT_START_LAYER))
        if current_roads is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.INPUT_START_LAYER))
        if skidding_distance is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.INPUT_START_LAYER))
        if method_of_generation is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.INPUT_START_LAYER))

        # We try to see if there are divergence between the CRSs of the inputs
        if cost_raster.crs() != polygons_to_connect.sourceCrs() \
                or polygons_to_connect.sourceCrs() != current_roads.sourceCrs():
            raise QgsProcessingException(self.tr("ERROR: The input layers have different CRSs."))

        # We check if the cost raster in indeed numeric
        if cost_raster.rasterType() not in [cost_raster.Multiband, cost_raster.GrayOrUndefined]:
            raise QgsProcessingException(self.tr("ERROR: The input cost raster is not numeric."))

        # We initialize the "sink", an object that will make use able to create an output.
        # First, we create the fields for the attributes of our lines as outputs.
        # They will only have one field :
        sink_fields = MinCostPathHelper.create_fields()
        # We indicate that our output will be a line, stored in WBK format.
        output_geometry_type = QgsWkbTypes.LineString
        # Finally, we create the field object and register the destination ID of it.
        # This sink will be based on the OUTPUT parameter we registered during initialization,
        # will have the fields and the geometry type we just created, and the same CRS as the cost raster.
        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            fields=sink_fields,
            geometryType=output_geometry_type,
            crs=cost_raster.crs(),
        )

        # If sink was not created, throw an exception to indicate that the algorithm
        # encountered a fatal error. The exception text can be any string, but in this
        # case we use the pre-built invalidSinkError method to return a standard
        # helper text for when a sink cannot be evaluated
        if sink is None:
            raise QgsProcessingException(self.invalidSinkError(parameters, self.OUTPUT))

        # First of all : We transform the starting polygons into cells on the raster (coordinates
        # in rows and colons).
        start_features = list(polygons_to_connect.getFeatures())
        # feedback.pushInfo(str(len(start_features)))
        # We make a dictionary of nodes. For a given row/column tuple, it associate a pointXY in QGIS format.
        start_row_cols_dict = MinCostPathHelper.features_to_row_cols(start_features, cost_raster)
        # If there are no
        if len(start_row_cols_dict) == 0:
            raise QgsProcessingException(self.tr("ERROR: The start-point layer contains no legal point."))
        elif len(start_row_cols_dict) >= 2:
            raise QgsProcessingException(self.tr("ERROR: The start-point layer contains more than one legal point."))
        # we take only the first point of the departure points (the first entry in our dictionnary)
        start_row_col = list(start_row_cols_dict.keys())[0]

        # Same dictionnary for the end points.
        end_features = list(current_roads.getFeatures())
        # feedback.pushInfo(str(len(end_features)))
        end_row_cols_dict = MinCostPathHelper.features_to_row_cols(end_features, cost_raster)
        if len(end_row_cols_dict) == 0:
            raise QgsProcessingException(self.tr("ERROR: The end-point layer contains no legal point."))

        if start_row_col in end_row_cols_dict:
            raise QgsProcessingException(self.tr("ERROR: The end-point(s) overlap with start point."))
        end_row_cols = list(end_row_cols_dict.keys())
        # feedback.pushInfo(str(start_col_rows))
        # feedback.pushInfo(str(end_col_rows))

        block = MinCostPathHelper.get_all_block(cost_raster, cost_raster_band)
        matrix, contains_negative = MinCostPathHelper.block2matrix(block)
        feedback.pushInfo(self.tr("The size of cost raster is: %d * %d") % (block.height(), block.width()))

        if contains_negative:
            raise QgsProcessingException(self.tr("ERROR: Cost raster contains negative value."))

        feedback.pushInfo(self.tr("Searching least cost path..."))

        min_cost_path, costs, selected_end = dijkstra(start_row_col, end_row_cols, matrix, feedback)
        # feedback.pushInfo(str(min_cost_path))
        if min_cost_path is None:
            if feedback.isCanceled():
                raise QgsProcessingException(self.tr("ERROR: Search canceled."))
            else:
                raise QgsProcessingException(self.tr("ERROR: The end-point(s) is not reachable from start-point."))
        feedback.setProgress(100)
        feedback.pushInfo(self.tr("Search completed! Saving path..."))

        start_point = start_row_cols_dict[start_row_col]
        end_point = end_row_cols_dict[selected_end]
        path_points = MinCostPathHelper.create_points_from_path(cost_raster, min_cost_path, start_point, end_point)
        if output_linear_reference:
            # add linear reference
            for point, cost in zip(path_points, costs):
                point.addMValue(cost)
        total_cost = costs[-1]
        path_feature = MinCostPathHelper.create_path_feature_from_points(path_points, total_cost, sink_fields)

        sink.addFeature(path_feature, QgsFeatureSink.FastInsert)
        return {self.OUTPUT: dest_id}

    # Here are different functions used by QGIS to name and define the algorithm
    # to the user.
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Forest Road Network creation'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        # We don't need it right now, as our plugin only have one algorithm
        return ''

    # Function used for translation. Called everytime something needs to be
    # Translated
    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ForestRoadNetworkAlgorithm()

    def helpUrl(self):
        # No help URL for now; Github of the project could be nice once done.
        return ''

    def shortHelpString(self):
        return self.tr("""
        This algorithm creates a forest road network based on areas to access (polygons) and current roads to connect them to (lines).
        
        **Parameters:**
          
          Please ensure all the input layers have the same CRS.
        
          - Cost raster layer: Numeric raster layer that represents the cost of each spatial unit. It should not contains negative value. Pixel with `NoData` value represent it is unreachable.
         
          - Cost raster band: The input band of the cost raster.
         
          - Polygons to access via the generated roads: Layer that contains the polygons to access.
         
          - Roads to connect the polygons to access to: Layer that contains the roads to connect the polygons to.
          
          - Network generation type: a parameter indicating what type of heuristic is used to generate the network. Random cell order, farther cells from current roads first, closer cells from curent roads first.
          
          - Skidding distance. Maximum distance that a cell can be to not need a road going up to it.
         
        """)

    def shortDescription(self):
        return self.tr('Generate a network of roads to connect forest area to an existing road network.')

    # Path to the icon of the algorithm
    def svgIconPath(self):
        return '.icon.png'

    def tags(self):
        return ['least', 'cost', 'path', 'distance', 'raster', 'analysis', 'road', 'network', 'forest', 'A*', 'dijkstra']

 # Methods to help the algorithm; all static, do not need to initialize an object of this class.
class MinCostPathHelper:

    # Method to determine where a given point is in the raster.
    @staticmethod
    def _point_to_row_col(pointxy, raster_layer):
        xres = raster_layer.rasterUnitsPerPixelX()
        yres = raster_layer.rasterUnitsPerPixelY()
        extent = raster_layer.dataProvider().extent()

        col = floor((pointxy.x() - extent.xMinimum()) / xres)
        row = floor((extent.yMaximum() - pointxy.y()) / yres)

        return row, col

    # Function to transform a given row/column into a QGIS point with a x,y
    # coordinates based on the resolution of the raster layer we're considering
    # (calculated with its extent and number of cells)
    @staticmethod
    def _row_col_to_point(row_col, raster_layer):
        xres = raster_layer.rasterUnitsPerPixelX()
        yres = raster_layer.rasterUnitsPerPixelY()
        extent = raster_layer.dataProvider().extent()

        x = (row_col[1] + 0.5) * xres + extent.xMinimum()
        y = extent.yMaximum() - (row_col[0] + 0.5) * yres
        return QgsPoint(x, y)

    @staticmethod
    def create_points_from_path(cost_raster, min_cost_path, start_point, end_point):
        path_points = list(
            map(lambda row_col: MinCostPathHelper._row_col_to_point(row_col, cost_raster), min_cost_path))
        path_points[0].setX(start_point.x())
        path_points[0].setY(start_point.y())
        path_points[-1].setX(end_point.x())
        path_points[-1].setY(end_point.y())
        return path_points

    @staticmethod
    def create_fields():
        # Create the field of "total cost" by indicating name, type, typeName, lenght and precision (decimals in that case)
        cost_field = QgsField("total cost", QVariant.Double, "double", 10, 3)
        # Then, we create a container of multiple fields
        fields = QgsFields()
        fields.append(cost_field)
        # We return the container with our field.
        return fields

    @staticmethod
    def create_path_feature_from_points(path_points, total_cost, fields):
        polyline = QgsGeometry.fromPolyline(path_points)
        feature = QgsFeature(fields)
        # feature.setAttribute(0, 1) # id
        cost_index = feature.fieldNameIndex("total cost")
        feature.setAttribute(cost_index, total_cost)  # cost
        feature.setGeometry(polyline)
        return feature

    # Method to transform given features into a list
    # of points. Each point corresponds to the center
    # of a cell on the raster that is touched by the features.
    @staticmethod
    def features_to_row_cols(given_features, raster_layer):

        row_cols = {}
        extent = raster_layer.dataProvider().extent()
        # if extent.isNull() or extent.isEmpty:
        #     return list(col_rows)

        for given_feature in given_features:
            if given_feature.hasGeometry():

                given_feature = given_feature.geometry()
                if given_feature.wkbType() == QgsWkbTypes.MultiPoint:
                    multi_points = given_feature.asMultiPoint()
                    for pointxy in multi_points:
                        row_col = MinCostPathHelper._point_to_row_col(pointxy, raster_layer)
                        row_cols[row_col] = pointxy

                elif given_feature.wkbType() == QgsWkbTypes.Point:
                    pointxy = given_feature.asPoint()
                    if extent.contains(pointxy):
                        row_col = MinCostPathHelper._point_to_row_col(pointxy, raster_layer)
                        row_cols[row_col] = pointxy

        return row_cols

    @staticmethod
    def get_all_block(raster_layer, band_num):
        provider = raster_layer.dataProvider()
        extent = provider.extent()

        xres = raster_layer.rasterUnitsPerPixelX()
        yres = raster_layer.rasterUnitsPerPixelY()
        width = floor((extent.xMaximum() - extent.xMinimum()) / xres)
        height = floor((extent.yMaximum() - extent.yMinimum()) / yres)
        return provider.block(band_num, extent, width, height)

    @staticmethod
    def block2matrix(block):
        contains_negative = False
        matrix = [[None if block.isNoData(i, j) else block.value(i, j) for j in range(block.width())]
                  for i in range(block.height())]

        for l in matrix:
            for v in l:
                if v is not None:
                    if v < 0:
                        contains_negative = True

        return matrix, contains_negative
